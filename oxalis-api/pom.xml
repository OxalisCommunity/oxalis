<?xml version="1.0"?>
<!--
  ~ Copyright 2010-2018 Norwegian Agency for Public Management and eGovernment (Difi)
  ~
  ~ Licensed under the EUPL, Version 1.1 or â€“ as soon they
  ~ will be approved by the European Commission - subsequent
  ~ versions of the EUPL (the "Licence");
  ~
  ~ You may not use this work except in compliance with the Licence.
  ~
  ~ You may obtain a copy of the Licence at:
  ~
  ~ https://joinup.ec.europa.eu/community/eupl/og_page/eupl
  ~
  ~ Unless required by applicable law or agreed to in
  ~ writing, software distributed under the Licence is
  ~ distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied.
  ~ See the Licence for the specific language governing
  ~ permissions and limitations under the Licence.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>oxalis</artifactId>
        <groupId>no.difi.oxalis</groupId>
        <version>4.1.3-SNAPSHOT</version>
    </parent>

    <artifactId>oxalis-api</artifactId>

    <name>Oxalis :: Core :: API</name>
    <description>
        Holds the stuff required by external components, which may be hooked into Oxalis.
        Classes and resources in this module should be made available to oxalis-inbound
        by placing it into a shared library in the web container.
    </description>
    <url>https://github.com/difi/oxalis</url>

    <issueManagement>
        <url>https://github.com/difi/oxalis/issues</url>
        <system>GitHub Issues</system>
    </issueManagement>

    <organization>
        <name>Norwegian Agency for Public Management and eGovernment (Difi)</name>
        <url>http://www.difi.no/</url>
    </organization>

    <properties>
        <build.timestamp>${maven.build.timestamp}</build.timestamp>
        <git.shallow>false</git.shallow>
    </properties>

    <dependencies>
        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>


        <!-- VEFA PEPPOL -->
        <dependency>
            <groupId>no.difi.vefa</groupId>
            <artifactId>peppol-common</artifactId>
        </dependency>

        <!-- Zipkin -->
        <dependency>
            <groupId>io.opentracing</groupId>
            <artifactId>opentracing-api</artifactId>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- DI -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <prefix>git</prefix>
                    <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>
                    <verbose>true</verbose>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <skipPoms>true</skipPoms>
                    <generateGitPropertiesFile>false</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>src/main/resources/git.properties</generateGitPropertiesFilename>
                    <failOnNoGitDirectory>false</failOnNoGitDirectory>
                    <skip>false</skip>
                    <excludeProperties>
                        <!-- <excludeProperty>git.user.*</excludeProperty> -->
                    </excludeProperties>
                    <gitDescribe>
                        <!-- don't generate the describe property -->
                        <skip>${git.shallow}</skip>
                        <!-- if no tag was found "near" this commit, just print the commit's id instead, -->
                        <always>true</always>
                        <!-- how many chars should be displayed as the commit object id? 7 is git's default, -->
                        <abbrev>7</abbrev>
                        <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
                        <dirty>-dirty</dirty>
                        <!-- always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. -->
                        <forceLongFormat>true</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
    </build>

</project>

